diff -rPu5 openjpeg.orig\image.c openjpeg\image.c
--- openjpeg.orig\image.c	Thu Sep 13 08:58:39 2012
+++ openjpeg\image.c	Thu Sep 20 18:28:51 2012
@@ -81,9 +81,11 @@
 					opj_free(image_comp->data);
 				}
 			}
 			opj_free(image->comps);
 		}
+		/* SumatraPDF: fix memory leak */
+		if (image->icc_profile_buf) opj_free(image->icc_profile_buf);
 		opj_free(image);
 	}
 }
 
diff -rPu5 openjpeg.orig\j2k.c openjpeg\j2k.c
--- openjpeg.orig\j2k.c	Thu Sep 13 08:58:39 2012
+++ openjpeg\j2k.c	Fri Jan 04 00:06:58 2013
@@ -420,11 +420,11 @@
 	cp->tx0 = cio_read(cio, 4);		/* XT0siz */
 	cp->ty0 = cio_read(cio, 4);		/* YT0siz */
 	
 	if ((image->x0<0)||(image->x1<0)||(image->y0<0)||(image->y1<0)) {
 		opj_event_msg(j2k->cinfo, EVT_ERROR,
-									"%s: invalid image size (x0:%d, x1:%d, y0:%d, y1:%d)\n",
+									"JPWL: invalid image size (x0:%d, x1:%d, y0:%d, y1:%d)\n",
 									image->x0,image->x1,image->y0,image->y1);
 		return;
 	}
 	
 	image->numcomps = cio_read(cio, 2);	/* Csiz */
@@ -466,10 +466,16 @@
 		/* update components number in the jpwl_exp_comps filed */
 		cp->exp_comps = image->numcomps;
 	}
 #endif /* USE_JPWL */
 
+	/* cf. http://code.google.com/p/openjpeg/issues/detail?id=169 */
+	if (cp->tdx <= 0 || cp->tdy <= 0) {
+		opj_event_msg(j2k->cinfo, EVT_ERROR, "JPWL: invalid tile size (tdx: %d, tdy: %d)\n", cp->tdx, cp->tdy);
+		return;
+	}
+
 	image->comps = (opj_image_comp_t*) opj_calloc(image->numcomps, sizeof(opj_image_comp_t));
 	for (i = 0; i < image->numcomps; i++) {
 		int tmp, w, h;
 		tmp = cio_read(cio, 1);		/* Ssiz_i */
 		image->comps[i].prec = (tmp & 0x7f) + 1;
@@ -504,10 +510,16 @@
 			}
 			
 		}
 #endif /* USE_JPWL */
 
+		/* cf. http://code.google.com/p/openjpeg/issues/detail?id=169 */
+		if (image->comps[i].dx <= 0 || image->comps[i].dy <= 0) {
+			opj_event_msg(j2k->cinfo, EVT_ERROR, "JPWL: invalid component size (dx: %d, dy: %d)\n", image->comps[i].dx, image->comps[i].dy);
+			return;
+		}
+
 		/* TODO: unused ? */
 		w = int_ceildiv(image->x1 - image->x0, image->comps[i].dx);
 		h = int_ceildiv(image->y1 - image->y0, image->comps[i].dy);
 
 		image->comps[i].resno_decoded = 0;	/* number of resolution decoded */
@@ -555,17 +567,24 @@
 			}
 		}
 	}
 #endif /* USE_JPWL */
 
+	/* cf. http://code.google.com/p/openjpeg/issues/detail?id=169 */
+	if (cp->tw <= 0 || cp->th <= 0) {
+		opj_event_msg(j2k->cinfo, EVT_ERROR, "JPWL: bad number of tiles (%d x %d)\n", cp->tw, cp->th);
+		return;
+	}
+
 	cp->tcps = (opj_tcp_t*) opj_calloc(cp->tw * cp->th, sizeof(opj_tcp_t));
     if (cp->tcps == NULL)
     {
         opj_event_msg(j2k->cinfo, EVT_ERROR, "Out of memory\n");
         return;
     }
-	cp->tileno = (int*) opj_malloc(cp->tw * cp->th * sizeof(int));
+	/* cf. http://code.google.com/p/sumatrapdf/issues/detail?id=2152 */
+	cp->tileno = (int*) opj_calloc(cp->tw * cp->th, sizeof(int));
     if (cp->tileno == NULL)
     {
         opj_event_msg(j2k->cinfo, EVT_ERROR, "Out of memory\n");
         return;
     }
@@ -582,10 +601,16 @@
 			}
 		}
 	}
 #endif /* USE_JPWL */
 
+	/* cf. http://code.google.com/p/openjpeg/issues/detail?id=169 */
+	if (!cp->tcps) {
+		opj_event_msg(j2k->cinfo, EVT_ERROR, "JPWL: could not alloc tcps field of cp\n");
+		return;
+	}
+
 	for (i = 0; i < cp->tw * cp->th; i++) {
 		cp->tcps[i].POC = 0;
 		cp->tcps[i].numpocs = 0;
 		cp->tcps[i].first = 1;
 	}
@@ -821,10 +846,17 @@
 	opj_image_t *image = j2k->image;
 	opj_cio_t *cio = j2k->cio;
 	
 	len = cio_read(cio, 2);		/* Lcoc */
 	compno = cio_read(cio, image->numcomps <= 256 ? 1 : 2);	/* Ccoc */
+	/* cf. http://code.google.com/p/openjpeg/issues/detail?id=166 */
+	if (compno >= image->numcomps) {
+		opj_event_msg(j2k->cinfo, EVT_ERROR,
+			"JPWL: bad component number in COC (%d out of a maximum of %d)\n",
+			compno, image->numcomps);
+		return;
+	}
 	tcp->tccps[compno].csty = cio_read(cio, 1);	/* Scoc */
 	j2k_read_cox(j2k, compno);
 }
 
 static void j2k_write_qcx(opj_j2k_t *j2k, int compno) {
@@ -1005,10 +1037,18 @@
 		/* keep your private count of tiles */
 		backup_compno++;
 	};
 #endif /* USE_JPWL */
 
+	/* cf. http://code.google.com/p/openjpeg/issues/detail?id=166 */
+	if (compno >= j2k->image->numcomps) {
+		opj_event_msg(j2k->cinfo, EVT_ERROR,
+			"JPWL: bad component number in QCC (%d out of a maximum of %d)\n",
+			compno, j2k->image->numcomps);
+		return;
+	}
+
 	j2k_read_qcx(j2k, compno, len - 2 - (numcomp <= 256 ? 1 : 2));
 }
 
 static void j2k_write_poc(opj_j2k_t *j2k) {
 	int len, numpchgs, i;
@@ -1048,11 +1088,12 @@
 	opj_cio_t *cio = j2k->cio;
 	
 	old_poc = tcp->POC ? tcp->numpocs + 1 : 0;
 	tcp->POC = 1;
 	len = cio_read(cio, 2);		/* Lpoc */
-	numpchgs = (len - 2) / (5 + 2 * (numcomps <= 256 ? 1 : 2));
+	/* cf. http://code.google.com/p/openjpeg/issues/detail?id=165 */
+	numpchgs = int_min((len - 2) / (5 + 2 * (numcomps <= 256 ? 1 : 2)), 32 - old_poc);
 	
 	for (i = old_poc; i < numpchgs + old_poc; i++) {
 		opj_poc_t *poc;
 		poc = &tcp->pocs[i];
 		poc->resno0 = cio_read(cio, 1);	/* RSpoc_i */
@@ -1323,10 +1364,15 @@
 		while (i < cp->tileno_size && status == 0) {
 			status = cp->tileno[i] == tileno ? 1 : 0;
 			i++;
 		}
 		if (status == 0) {
+			/* cf. http://code.google.com/p/sumatrapdf/issues/detail?id=2152 */
+			if (cp->tileno_size >= cp->tw * cp->th) {
+				opj_event_msg(j2k->cinfo, EVT_ERROR, "JPWL: too many tiles (max %d)\n", cp->tw * cp->th);
+				return;
+			}
 			cp->tileno[cp->tileno_size] = tileno;
 			cp->tileno_size++;
 		}
 	}
 	
@@ -1511,20 +1557,24 @@
 
 	if (len == cio_numbytesleft(cio) + 1) {
 		truncate = 1;		/* Case of a truncate codestream */
 	}	
 
+    /* cf. http://code.google.com/p/openjpeg/issues/detail?id=205 */
+    if (len >= 4)
    {/* chop padding bytes: */
     unsigned char *s, *e; 
 
     s = cio_getbp(cio);
     e = s + len;
 
   if(len > 8) s = e - 8;
 
   if(e[-2] == 0x00 && e[-1] == 0x00) /* padding bytes */
   {
+    /* cf. http://code.google.com/p/openjpeg/issues/detail?id=205 */
+    if ((s = memchr(s, 0xff, e - s - 1)) && *(s + 1) == 0xd9)
 	while(e > s)
  {
 	if(e[-2] == 0xff && e[-1] == 0xd9)	break;
   --len; --e; truncate = 1;
  }
@@ -1588,10 +1638,18 @@
 			}
 		}
 	};
 #endif /* USE_JPWL */
 
+	/* cf. http://code.google.com/p/openjpeg/issues/detail?id=166 */
+	if (compno >= j2k->image->numcomps) {
+		opj_event_msg(j2k->cinfo, EVT_ERROR,
+			"JPWL: bad component number in RGN (%d out of a maximum of %d)\n",
+			compno, j2k->image->numcomps);
+		return;
+	}
+
 	tcp->tccps[compno].roishift = cio_read(cio, 1);				/* SPrgn */
 }
 
 static void j2k_write_eoc(opj_j2k_t *j2k) {
 	opj_cio_t *cio = j2k->cio;
@@ -2256,11 +2314,12 @@
 		numpocs_tile = 0;
 		tcp->POC = 0;
 		if (parameters->numpocs) {
 			/* initialisation of POC */
 			tcp->POC = 1;
-			for (i = 0; i < parameters->numpocs; i++) {
+			/* cf. http://code.google.com/p/openjpeg/issues/detail?id=165 */
+			for (i = 0; i < int_min(parameters->numpocs, 32); i++) {
 				if((tileno == parameters->POC[i].tile - 1) || (parameters->POC[i].tile == -1)) {
 					opj_poc_t *tcp_poc = &tcp->pocs[numpocs_tile];
 					tcp_poc->resno0		= parameters->POC[numpocs_tile].resno0;
 					tcp_poc->compno0	= parameters->POC[numpocs_tile].compno0;
 					tcp_poc->layno1		= parameters->POC[numpocs_tile].layno1;
diff -rPu5 openjpeg.orig\jp2.c openjpeg\jp2.c
--- openjpeg.orig\jp2.c	Thu Sep 13 08:58:39 2012
+++ openjpeg\jp2.c	Tue Jan 08 22:35:14 2013
@@ -171,10 +171,15 @@
 			box->length = cio_numbytesleft(cio) + 12;
 	}
 	else if (box->length == 0) {
 		box->length = cio_numbytesleft(cio) + 8;
 	}
+	/* cf. http://code.google.com/p/openjpeg/issues/detail?id=155 */
+	if (box->length < 0) {
+		opj_event_msg(cinfo, EVT_ERROR, "Integer overflow in box->length\n");
+		return OPJ_FALSE; // TODO: actually check jp2_read_boxhdr's return value
+	}
 	
 	return OPJ_TRUE;
 }
 
 #if 0
@@ -652,10 +657,12 @@
       if (box.type == JP2_JP2C) 
         {
         opj_event_msg(cinfo, EVT_ERROR, "Expected JP2H Marker\n");
         return OPJ_FALSE;
         }
+	  /* cf. http://code.google.com/p/openjpeg/issues/detail?id=155 */
+	  if (box.length < 8) return OPJ_FALSE;
       cio_skip(cio, box.length - 8);
 
       if(cio->bp >= cio->end) return OPJ_FALSE;
 
       if( jp2_read_boxhdr(cinfo, cio, &box) == OPJ_FALSE ) return OPJ_FALSE;
@@ -677,46 +684,56 @@
     {
     if(box.type == JP2_COLR)
       {
       if( !jp2_read_colr(jp2, cio, &box, color))
         {
+        /* cf. http://code.google.com/p/openjpeg/issues/detail?id=155 */
+        if (box.length < 8) return OPJ_FALSE;
         cio_seek(cio, box.init_pos + 8);
         cio_skip(cio, box.length - 8);
         }
       if( jp2_read_boxhdr(cinfo, cio, &box) == OPJ_FALSE ) return OPJ_FALSE;
       continue;
       }
     if(box.type == JP2_CDEF && !jp2->ignore_pclr_cmap_cdef)
       {
       if( !jp2_read_cdef(jp2, cio, &box, color))
         {
+        /* cf. http://code.google.com/p/openjpeg/issues/detail?id=155 */
+        if (box.length < 8) return OPJ_FALSE;
         cio_seek(cio, box.init_pos + 8);
         cio_skip(cio, box.length - 8);
         }
       if( jp2_read_boxhdr(cinfo, cio, &box) == OPJ_FALSE ) return OPJ_FALSE;
       continue;
       }
     if(box.type == JP2_PCLR && !jp2->ignore_pclr_cmap_cdef)
       {
       if( !jp2_read_pclr(jp2, cio, &box, color))
         {
+        /* cf. http://code.google.com/p/openjpeg/issues/detail?id=155 */
+        if (box.length < 8) return OPJ_FALSE;
         cio_seek(cio, box.init_pos + 8);
         cio_skip(cio, box.length - 8);
         }
       if( jp2_read_boxhdr(cinfo, cio, &box) == OPJ_FALSE ) return OPJ_FALSE;
       continue;
       }
     if(box.type == JP2_CMAP && !jp2->ignore_pclr_cmap_cdef)
       {
       if( !jp2_read_cmap(jp2, cio, &box, color))
         {
+        /* cf. http://code.google.com/p/openjpeg/issues/detail?id=155 */
+        if (box.length < 8) return OPJ_FALSE;
         cio_seek(cio, box.init_pos + 8);
         cio_skip(cio, box.length - 8);
         }
       if( jp2_read_boxhdr(cinfo, cio, &box) == OPJ_FALSE ) return OPJ_FALSE;
       continue;
       }
+    /* cf. http://code.google.com/p/openjpeg/issues/detail?id=155 */
+    if (box.length < 8) return OPJ_FALSE;
     cio_seek(cio, box.init_pos + 8);
     cio_skip(cio, box.length - 8);
     if( jp2_read_boxhdr(cinfo, cio, &box) == OPJ_FALSE ) return OPJ_FALSE;
 
     }/* while(cio_tell(cio) < box_end) */
@@ -908,16 +925,20 @@
     opj_event_msg(cinfo, EVT_ERROR, "Failed to read boxhdr\n");
     return OPJ_FALSE;
   }
 	do {
 		if(JP2_JP2C != box.type) {
+			/* cf. http://code.google.com/p/openjpeg/issues/detail?id=155 */
+			if (box.length < 8) return OPJ_FALSE;
 			cio_skip(cio, box.length - 8);
 			if( jp2_read_boxhdr(cinfo, cio, &box) == OPJ_FALSE ) return OPJ_FALSE;
 		}
 	} while(JP2_JP2C != box.type);
 
 	*j2k_codestream_offset = cio_tell(cio);
+	/* cf. http://code.google.com/p/openjpeg/issues/detail?id=155 */
+	if (box.length < 8) return OPJ_FALSE;
 	*j2k_codestream_length = box.length - 8;
 
 	return OPJ_TRUE;
 }
 
diff -rPu5 openjpeg.orig\opj_config.h openjpeg\opj_config.h
--- openjpeg.orig\opj_config.h	Thu Jan 01 01:00:00 1970
+++ openjpeg\opj_config.h	Thu Sep 20 19:35:01 2012
@@ -0,0 +1,41 @@
+/* If you want to build the library manually without using
+ * 'configure' or 'CMake'
+ * then copy this file 
+ * 'opj_config.h.in.user' 
+ *       to
+ * 'opj_config.h'
+ * 
+ * Open 'opj_config.h' and change the file contents
+ * if you want to define something because you know you have 
+ * BOTH installed the library AND the header file(s).
+ * Then e.g. write
+#define HAVE_LIBPNG 1
+ *  
+ *
+ * The file 'opj_config.h' will be included in some source files.
+ * ==== YOU CAN NOT COMPILE WITHOUT IT. ====
+ * === DO NOT FOREGET TO CHANGE 'config.nix' APPROPRIATELY. ====
+*/
+
+/* DO NOT DEFINE BOTH VERSIONS OF LCMS */
+/* define to 1 if you have both liblcms and lcms.h installed */
+#undef HAVE_LIBLCMS1
+/* #define HAVE_LIBLCMS1 1 */
+
+/* define to 1 if you have both liblcms2 and lcms2.h installed */
+#undef HAVE_LIBLCMS2
+/* #define HAVE_LIBLCMS2 1 */
+
+/* define to 1 if you have both libpng and png.h installed */
+#undef HAVE_LIBPNG
+/* #define HAVE_LIBPNG 1 */
+
+/* define to 1 if you have both libtiff and tiff.h installed */
+#undef HAVE_LIBTIFF
+/* #define HAVE_LIBTIFF 1 */
+
+/*---------------- DO NOT CHANGE BELOW THIS LINE ----------------*/
+#define PACKAGE_URL "http://www.openjpeg.org/"
+#define PACKAGE_BUGREPORT "http://code.google.com/p/openjpeg/"
+
+#define PACKAGE_VERSION "1.5.1"
